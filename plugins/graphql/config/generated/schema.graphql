type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  lead: String
  content: String!
  photo: UploadFile
}

input ArticleInput {
  title: String!
  lead: String
  content: String!
  photo: ID
}

"""Kategoria w menu"""
type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  is_active: Boolean
  photo: UploadFile
}

input CategoryInput {
  name: String!
  is_active: Boolean
  photo: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createLunchInput {
  data: LunchInput
}

type createLunchPayload {
  lunch: Lunch
}

input createMealInput {
  data: MealInput
}

type createMealPayload {
  meal: Meal
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSubcategoryInput {
  data: SubcategoryInput
}

type createSubcategoryPayload {
  subcategory: Subcategory
}

input createTextInput {
  data: TextInput
}

type createTextPayload {
  text: Text
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteLunchInput {
  where: InputID
}

type deleteLunchPayload {
  lunch: Lunch
}

input deleteMealInput {
  where: InputID
}

type deleteMealPayload {
  meal: Meal
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSubcategoryInput {
  where: InputID
}

type deleteSubcategoryPayload {
  subcategory: Subcategory
}

input deleteTextInput {
  where: InputID
}

type deleteTextPayload {
  text: Text
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  lead: String
  content: String
  photo: ID
}

input editCategoryInput {
  name: String
  is_active: Boolean
  photo: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editLunchInput {
  title: String
  content: String
  active: Boolean
  price: String
  date: DateTime
}

input editMealInput {
  name: String
  price: Float
  category: ID
  subcategory: ID
  additional_info: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSubcategoryInput {
  name: String
  is_active: Boolean
  parent: ID
}

input editTextInput {
  key: String
  pl: String
  eng: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""Lunch dnia"""
type Lunch {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  content: String
  active: Boolean
  price: String
  date: DateTime
}

input LunchInput {
  title: String
  content: String
  active: Boolean
  price: String
  date: DateTime
}

type Meal {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  price: Float
  category: Category
  subcategory: Subcategory
  additional_info: String
}

input MealInput {
  name: String
  price: Float
  category: ID
  subcategory: ID
  additional_info: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Lunch | createLunchPayload | updateLunchPayload | deleteLunchPayload | Meal | createMealPayload | updateMealPayload | deleteMealPayload | Subcategory | createSubcategoryPayload | updateSubcategoryPayload | deleteSubcategoryPayload | Text | createTextPayload | updateTextPayload | deleteTextPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createLunch(input: createLunchInput): createLunchPayload
  updateLunch(input: updateLunchInput): updateLunchPayload
  deleteLunch(input: deleteLunchInput): deleteLunchPayload
  createMeal(input: createMealInput): createMealPayload
  updateMeal(input: updateMealInput): updateMealPayload
  deleteMeal(input: deleteMealInput): deleteMealPayload
  createSubcategory(input: createSubcategoryInput): createSubcategoryPayload
  updateSubcategory(input: updateSubcategoryInput): updateSubcategoryPayload
  deleteSubcategory(input: deleteSubcategoryInput): deleteSubcategoryPayload
  createText(input: createTextInput): createTextPayload
  updateText(input: updateTextInput): updateTextPayload
  deleteText(input: deleteTextInput): deleteTextPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  lunch(id: ID!): Lunch
  lunches(sort: String, limit: Int, start: Int, where: JSON): [Lunch]
  meal(id: ID!): Meal
  meals(sort: String, limit: Int, start: Int, where: JSON): [Meal]
  subcategory(id: ID!): Subcategory
  subcategories(sort: String, limit: Int, start: Int, where: JSON): [Subcategory]
  text(id: ID!): Text
  texts(sort: String, limit: Int, start: Int, where: JSON): [Text]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Subkategoria menu"""
type Subcategory {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  is_active: Boolean
  parent: Category
}

input SubcategoryInput {
  name: String!
  is_active: Boolean
  parent: ID
}

type Text {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  key: String!
  pl: String
  eng: String
}

input TextInput {
  key: String!
  pl: String
  eng: String
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateLunchInput {
  where: InputID
  data: editLunchInput
}

type updateLunchPayload {
  lunch: Lunch
}

input updateMealInput {
  where: InputID
  data: editMealInput
}

type updateMealPayload {
  meal: Meal
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSubcategoryInput {
  where: InputID
  data: editSubcategoryInput
}

type updateSubcategoryPayload {
  subcategory: Subcategory
}

input updateTextInput {
  where: InputID
  data: editTextInput
}

type updateTextPayload {
  text: Text
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
